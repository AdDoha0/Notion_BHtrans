from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext

import logging
import os
import tempfile

from share.usecases import transcribe_file
from share.promt_utils import get_promt_call_analyze, get_promt_call_summary
from .state import AudioStates
from .client import create_gptAnswer

logger = logging.getLogger(__name__)
router = Router()

# --- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _get_file_info(message: Message) -> tuple[str, str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏ filename –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—É–¥–∏–æ"""
    if message.voice:
        return message.voice.file_id, "voice.ogg"
    elif message.audio:
        return message.audio.file_id, message.audio.file_name or "audio.mp3"
    else:  # document
        return message.document.file_id, message.document.file_name or "audio.mp3"

async def _process_audio_file(
    message: Message,
    processing_message: Message,
    system_prompt: str,
    output_filename: str,
    success_caption: str,
    header_text: str
) -> None:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    try:
        file_id, filename = await _get_file_info(message)
        
        result = await transcribe_file(
            message.bot,
            file_id,
            filename,
            system_prompt
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(f"{header_text}\n")
            temp_file.write(f"–§–∞–π–ª: {filename}\n")
            temp_file.write("=" * 50 + "\n\n")
            temp_file.write(result)
            temp_file_path = temp_file.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            document = FSInputFile(temp_file_path, filename=output_filename)
            await message.answer_document(
                document=document,
                caption=success_caption
            )
            await processing_message.delete()
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")


@router.message(Command("transcribe"))
async def cmd_transcribe(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º"""
    await message.answer(
        "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: mp3, wav, ogg, m4a"
    )
    await state.set_state(AudioStates.waiting_for_audio_transcribe)

@router.message(Command("call_summary"))  
async def cmd_call_summary(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –∑–≤–æ–Ω–∫–∞"""
    await message.answer(
        "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: mp3, wav, ogg, m4a"
    )
    await state.set_state(AudioStates.waiting_for_audio_summary)

@router.message(Command("call_analysis"))
async def cmd_call_analysis(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞"""
    await message.answer(
        "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: mp3, wav, ogg, m4a"
    )
    await state.set_state(AudioStates.waiting_for_audio_analysis)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ---

@router.message(AudioStates.waiting_for_audio_transcribe)
async def handle_transcribe_audio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    if not (message.voice or message.audio or message.document):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
    
    processing = await message.answer("üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...")
    
    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º
        system_prompt = """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç–æ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ —Ä–∞–∑–¥–µ–ª–∏ —Ä–µ—á—å –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º. 
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        
        –°–ø–∏–∫–µ—Ä 1: [—Ç–µ–∫—Å—Ç]
        –°–ø–∏–∫–µ—Ä 2: [—Ç–µ–∫—Å—Ç]
        
        """
        
        await _process_audio_file(
            message,
            processing,
            system_prompt,
            "transcription.txt",
            "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ.",
            "üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        await processing.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
    
    await state.clear()

@router.message(AudioStates.waiting_for_audio_summary)
async def handle_summary_audio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)"""
    if not (message.voice or message.audio or message.document):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    processing = await message.answer("üë§ –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
        system_prompt = get_promt_call_summary()
        
        await _process_audio_file(
            message,
            processing,
            system_prompt,
            "driver_profile.txt",
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è –≥–æ—Ç–æ–≤! –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ.",
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await processing.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
    
    await state.clear()

@router.message(AudioStates.waiting_for_audio_analysis)
async def handle_analysis_audio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞"""
    if not (message.voice or message.audio or message.document):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    processing = await message.answer("üìû –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–≤–æ–Ω–æ–∫...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤
        system_prompt = get_promt_call_analyze()
        
        await _process_audio_file(
            message,
            processing,
            system_prompt,
            "call_analysis.txt",
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞ –≥–æ—Ç–æ–≤! –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ.",
            "üìû –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–≤–æ–Ω–∫–∞: {e}")
        await processing.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
    
    await state.clear()
