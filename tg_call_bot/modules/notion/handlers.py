import logging, os
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from modules.notion.client import get_driver_list, add_comment, get_driver_info, get_driver_comments
from .states import NotionStates
from .keyboards import drivers_kb, cancel_comment_kb, info_list_kb, info_nav_kb, comments_nav_kb
from .formatters import escape_md, driver_brief, driver_full
from .usecases import transcribe_file

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("drivers"))
async def show_drivers_command(message: Message, state: FSMContext):
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
    try:
        drivers = await get_driver_list()
        if not drivers:
            return await message.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await message.answer(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:",
            reply_markup=drivers_kb(drivers)
        )
        await state.set_state(NotionStates.waiting_for_driver_selection)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

@router.callback_query(F.data.startswith("driver_select:"))
async def handle_driver_selection(callback: CallbackQuery, state: FSMContext):
    driver_id = callback.data.split(":", 1)[1]
    try:
        info = await get_driver_info(driver_id)
        if not info:
            return await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ")
        await state.update_data(selected_driver_id=driver_id, selected_driver_name=info.get("name",""))
        await callback.message.edit_text(
            driver_brief(info),
            reply_markup=cancel_comment_kb(),
            parse_mode="Markdown"
        )
        await state.set_state(NotionStates.waiting_for_comment)
        await callback.answer()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–¥–∏—Ç–µ–ª—è")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–¥–∏—Ç–µ–ª—è")

@router.callback_query(F.data == "driver_cancel")
async def handle_driver_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "comment_cancel")
async def handle_comment_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@router.message(StateFilter(NotionStates.waiting_for_comment))
async def handle_comment_input(message: Message, state: FSMContext):
    data = await state.get_data()
    driver_id = data.get("selected_driver_id")
    driver_name = data.get("selected_driver_name", "")
    if not driver_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å")
        return await state.clear()

    processing = None
    comment_text = ""

    try:
        # TEXT
        if message.text:
            comment_text = message.text.strip()
            if not comment_text:
                return await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            processing = await message.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Notion...")

        # VOICE
        elif message.voice:
            processing = await message.answer("üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
            from share.promt_utils import get_promt_call_analyze
            system_prompt = get_promt_call_analyze()
            comment_text = await transcribe_file(message.bot, message.voice.file_id, "voice.ogg", system_prompt)
            await processing.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Notion...")

        # AUDIO/DOCUMENT
        elif message.audio or message.document:
            processing = await message.answer("üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
            from share.promt_utils import get_promt_call_analyze
            system_prompt = get_promt_call_analyze()
            if message.audio:
                comment_text = await transcribe_file(message.bot, message.audio.file_id, message.audio.file_name or "audio.mp3", system_prompt)
            else:
                name = message.document.file_name or "audio.mp3"
                comment_text = await transcribe_file(message.bot, message.document.file_id, name, system_prompt)
            await processing.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Notion...")

        else:
            return await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

        if not comment_text.strip():
            return await processing.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        # SAVE to Notion
        ok = await add_comment(driver_id, comment_text)
        if ok:
            show = comment_text[:500] + ("..." if len(comment_text) > 500 else "")
            try:
                await processing.edit_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üë§ *–í–æ–¥–∏—Ç–µ–ª—å:* {escape_md(driver_name)}\n"
                    f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n{escape_md(show)}",
                    parse_mode="Markdown"
                )
            except Exception:
                await processing.edit_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
                    f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{show}"
                )
        else:
            await processing.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await state.clear()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        if processing:
            await processing.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        await state.clear()

@router.message(Command("driver_info"))
async def show_driver_info_command(message: Message):
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
    try:
        drivers = await get_driver_list()
        if not drivers:
            return await message.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await message.answer(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=info_list_kb(drivers)
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

@router.callback_query(F.data.startswith("info_show:"))
async def show_detailed_driver_info(callback: CallbackQuery):
    driver_id = callback.data.split(":", 1)[1]
    try:
        info = await get_driver_info(driver_id)
        if not info:
            return await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ")
        comments = await get_driver_comments(driver_id)
        await callback.message.edit_text(
            driver_full(info, comments),
            reply_markup=info_nav_kb(),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

@router.callback_query(F.data == "info_cancel")
async def handle_info_cancel(callback: CallbackQuery):
    await callback.message.edit_text("‚ÑπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    await callback.answer()

@router.callback_query(F.data.startswith("show_comments:"))
async def show_all_comments(callback: CallbackQuery):
    driver_id = callback.data.split(":", 1)[1]
    try:
        info = await get_driver_info(driver_id)
        comments = await get_driver_comments(driver_id)
        if not info:
            return await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ")

        lines = [f"üí¨ *–í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ {escape_md(info.get('name',''))}*\n", f"–í—Å–µ–≥–æ: {len(comments) if comments else 0}\n"]
        if comments:
            for i, c in enumerate(comments, 1):
                created = c.get("created_time","")[:16].replace("T"," ")
                text = c.get("text","")
                lines.append(f"*{i}.* [{created or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}]\n{escape_md(text)}\n")
        else:
            lines.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        await callback.message.edit_text(
            "\n".join(lines),
            reply_markup=comments_nav_kb(driver_id),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

@router.callback_query(F.data == "back_to_drivers")
async def back_to_drivers_list(callback: CallbackQuery):
    try:
        drivers = await get_driver_list()
        await callback.message.edit_text(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=info_list_kb(drivers)
        )
        await callback.answer()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")
