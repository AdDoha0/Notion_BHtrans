"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion –≤ Telegram –±–æ—Ç–µ
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from services.notion import get_driver_list, add_comment, get_driver_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class NotionStates(StatesGroup):
    waiting_for_driver_selection = State()
    waiting_for_comment = State()

@router.message(Command("drivers"))
async def show_drivers_command(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    
    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = await get_driver_list()
        
        if not drivers:
            await message.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for driver in drivers:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            display_name = driver['name'][:30] + "..." if len(driver['name']) > 30 else driver['name']
            
            button = InlineKeyboardButton(
                text=display_name,
                callback_data=f"driver_select:{driver['id']}"
            )
            keyboard.inline_keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="driver_cancel"
        )
        keyboard.inline_keyboard.append([cancel_button])
        
        await message.answer(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        await state.set_state(NotionStates.waiting_for_driver_selection)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

@router.callback_query(F.data.startswith("driver_select:"))
async def handle_driver_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è"""
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ callback_data
        driver_id = callback.data.split(":", 1)[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        driver_info = await get_driver_info(driver_id)
        
        if not driver_info:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            selected_driver_id=driver_id,
            selected_driver_name=driver_info['name']
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        info_text = f"üë§ –í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: **{driver_info['name']}**\n\n"
        
        if driver_info['status']:
            info_text += f"üìä –°—Ç–∞—Ç—É—Å: {driver_info['status']}\n"
        
        if driver_info['number']:
            info_text += f"üìû –ù–æ–º–µ—Ä: {driver_info['number']}\n"
        
        if driver_info['about_driver']:
            info_text += f"‚ÑπÔ∏è –û –≤–æ–¥–∏—Ç–µ–ª–µ: {driver_info['about_driver'][:100]}...\n" if len(driver_info['about_driver']) > 100 else f"‚ÑπÔ∏è –û –≤–æ–¥–∏—Ç–µ–ª–µ: {driver_info['about_driver']}\n"
        
        if driver_info['date']:
            info_text += f"üìÖ –î–∞—Ç–∞: {driver_info['date']}\n"
        
        if driver_info['trailer']:
            info_text += f"üöõ –ü—Ä–∏—Ü–µ–ø: –î–∞\n"
        
        if driver_info['notes']:
            notes_preview = driver_info['notes'][:200] + "..." if len(driver_info['notes']) > 200 else driver_info['notes']
            info_text += f"\nüìù –¢–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n{notes_preview}\n"
        
        info_text += "\nüí¨ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="comment_cancel")]
        ])
        
        await callback.message.edit_text(
            info_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(NotionStates.waiting_for_comment)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–¥–∏—Ç–µ–ª—è")

@router.callback_query(F.data == "driver_cancel")
async def handle_driver_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è"""
    await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "comment_cancel")
async def handle_comment_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@router.message(StateFilter(NotionStates.waiting_for_comment))
async def handle_comment_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        driver_id = state_data.get('selected_driver_id')
        driver_name = state_data.get('selected_driver_name')
        
        if not driver_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å")
            await state.clear()
            return
        
        comment_text = message.text.strip()
        
        if not comment_text:
            await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        processing_msg = await message.answer("üîÑ –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        success = await add_comment(driver_id, comment_text)
        
        if success:
            await processing_msg.edit_text(
                f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}"
            )
        else:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        await state.clear()

@router.message(Command("driver_info"))
async def show_driver_info_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
        
        drivers = await get_driver_list()
        
        if not drivers:
            await message.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for driver in drivers:
            display_name = driver['name'][:30] + "..." if len(driver['name']) > 30 else driver['name']
            
            button = InlineKeyboardButton(
                text=display_name,
                callback_data=f"info_show:{driver['id']}"
            )
            keyboard.inline_keyboard.append([button])
        
        cancel_button = InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="info_cancel"
        )
        keyboard.inline_keyboard.append([cancel_button])
        
        await message.answer(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

@router.callback_query(F.data.startswith("info_show:"))
async def show_detailed_driver_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ"""
    
    try:
        driver_id = callback.data.split(":", 1)[1]
        
        driver_info = await get_driver_info(driver_id)
        
        if not driver_info:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"üë§ **{driver_info['name']}**\n\n"
        
        info_text += f"üÜî ID: `{driver_info['id'][:8]}...`\n"
        
        if driver_info['status']:
            info_text += f"üìä –°—Ç–∞—Ç—É—Å: {driver_info['status']}\n"
        
        if driver_info['about_driver']:
            info_text += f"‚ÑπÔ∏è –û –≤–æ–¥–∏—Ç–µ–ª–µ: {driver_info['about_driver']}\n"
        
        if driver_info['number']:
            info_text += f"üìû –ù–æ–º–µ—Ä: {driver_info['number']}\n"
        
        if driver_info['date']:
            info_text += f"üìÖ –î–∞—Ç–∞: {driver_info['date']}\n"
        
        info_text += f"üöõ –ü—Ä–∏—Ü–µ–ø: {'–î–∞' if driver_info['trailer'] else '–ù–µ—Ç'}\n"
        
        if driver_info['notes']:
            info_text += f"\nüìù **–ó–∞–º–µ—Ç–∫–∏:**\n{driver_info['notes']}\n"
        else:
            info_text += f"\nüìù –ó–∞–º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                callback_data=f"driver_select:{driver_id}"
            )],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_drivers")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="info_cancel")]
        ])
        
        await callback.message.edit_text(
            info_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

@router.callback_query(F.data == "info_cancel")
async def handle_info_cancel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await callback.message.edit_text("‚ÑπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    await callback.answer()

@router.callback_query(F.data == "back_to_drivers")
async def back_to_drivers_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /driver_info
    fake_message = type('obj', (object,), {
        'answer': callback.message.edit_text,
        'from_user': callback.from_user
    })()
    
    await show_driver_info_command(fake_message) 