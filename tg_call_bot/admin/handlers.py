from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import psutil
import os
from datetime import datetime

from config import ADMINS

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_for_broadcast = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üíª –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
        ],
        [
            # InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
        ]
    ])
    return keyboard

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    text = f"""
üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(text, reply_markup=get_admin_keyboard())

@router.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action = callback.data.split("_")[1]
    
    if action == "stats":
        await show_stats(callback)
    elif action == "system":
        await show_system_info(callback)
    elif action == "broadcast":
        await start_broadcast(callback, state)
    elif action == "logs":
        await show_logs(callback)
    elif action == "close":
        await callback.message.delete()
    elif action == "back":
        await show_main_menu(callback)

async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {uptime.days} –¥–Ω–µ–π, {uptime.seconds//3600} —á–∞—Å–æ–≤
üë• –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(ADMINS)}
üìà –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def show_system_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    text = f"""
üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>

üñ•Ô∏è CPU: {cpu_percent}%
üß† RAM: {memory.percent}% ({memory.used//1024//1024} MB / {memory.total//1024//1024} MB)
üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used//1024//1024//1024} GB / {disk.total//1024//1024//1024} GB)
üêç Python: {os.sys.version.split()[0]}
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_system")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = """
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_broadcast)

@router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ:\n\n{message.text}")
    await message.answer("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
    
    await state.clear()

async def show_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    text = """
üìã <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>

üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–µ–π—á–∞—Å
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: –∞–∫—Ç–∏–≤–Ω–æ

‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    text = f"""
üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await callback.message.edit_text(text, reply_markup=get_admin_keyboard())

