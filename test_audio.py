

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'tg_call_bot'))

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'tg_call_bot'))
# from modules.openai.client import process_audio_to_comment, transcription, create_gptAnswer

async def test_audio_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
    audio_file = "mock_audio/test.mp3"
    
    if not os.path.exists(audio_file):
        print(f"‚ùå –§–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        print("üéôÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
        transcribed = await transcription(audio_file)
        print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{transcribed}\n")
        
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ GPT...")
        analysis = await create_gptAnswer(transcribed, "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ.")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ GPT:\n{analysis}\n")
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:")
        full_result = await process_audio_to_comment(audio_file)
        print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{full_result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_text_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    test_text = """
    –ó–≤–æ–Ω–æ–∫ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –ò–≤–∞–Ω–æ–º –ü–µ—Ç—Ä–æ–≤—ã–º.
    –í–æ–¥–∏—Ç–µ–ª—å: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–∞–±–æ—Ç—É –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    HR: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ.
    –í–æ–¥–∏—Ç–µ–ª—å: –£ –º–µ–Ω—è 5 –ª–µ—Ç –æ–ø—ã—Ç–∞, –µ—Å—Ç—å —Å–≤–æ–π —Ç—è–≥–∞—á Volvo, –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.
    HR: –û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫–∏–µ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã?
    –í–æ–¥–∏—Ç–µ–ª—å: –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–ø–ª–∞—Ç–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.
    HR: –û–ø–ª–∞—Ç–∞ –æ—Ç 200 —Ç—ã—Å—è—á –≤ –º–µ—Å—è—Ü, –≥—Ä–∞—Ñ–∏–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π.
    –í–æ–¥–∏—Ç–µ–ª—å: –ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å.
    """
    
    try:
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT...")
        analysis = await create_gptAnswer(test_text, "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è.")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ GPT:\n{analysis}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞)
    asyncio.run(test_text_processing())
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ (—Ç—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª)
    asyncio.run(test_audio_processing()) 